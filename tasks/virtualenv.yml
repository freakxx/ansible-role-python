---

- name: VirtualEnv | Cloning/Updating
  become: yes
  become_user: "{{ fubarhouse_user }}"
  git:
    repo: "{{ fubarhouse_python.repo_virtualenv }}"
    dest: "{{ fubarhouse_user_dir }}/{{ fubarhouse_python.main_dir }}/plugins/pyenv-virtualenv"
    clone: yes
    update: yes
    force: yes
    version: master
    recursive: false

- name: VirtualEnv | Ensure shell profiles are configured
  become: yes
  become_user: "{{ fubarhouse_user }}"
  lineinfile:
    dest: "{{ fubarhouse_user_dir }}/{{ item.filename }}"
    regexp: "{{ fubarhouse_user_dir }}/{{ fubarhouse_python.main_dir }}"/{{ fubarhouse_python.main_path }}/{{ fubarhouse_python.main_exec }} virtualenv-init -"
    line: "eval \"$({{ fubarhouse_user_dir }}/{{ fubarhouse_python.main_dir }}/{{ fubarhouse_python.main_path }}/{{ fubarhouse_python.main_exec }} virtualenv-init -)\""
    state: present
  with_items: "{{ fubarhouse_python.shell_profiles }}"
  ignore_errors: yes

- name: VirtualEnv | Get list of virtual environments
  become: yes
  become_user: "{{ fubarhouse_user }}"
  shell: "{{ fubarhouse_user_dir }}/{{ fubarhouse_python.main_dir }}/{{ fubarhouse_python.main_path }}/{{ fubarhouse_python.main_exec }} virtualenvs"
  register: virtualenv_versions

- name: VirtualEnv | Get current version information
  become: yes
  become_user: "{{ fubarhouse_user }}"
  shell: "{{ fubarhouse_user_dir }}/{{ fubarhouse_python.main_dir }}/{{ fubarhouse_python.main_path }}/{{ fubarhouse_python.main_exec }} virtualenvs | grep '*'"
  register: virtualenv_current_version
  failed_when: false

- name: VirtualEnv | Setup virtualenvs list
  set_fact:
    virtualenvs:
    - name: "Global-{{ python_version }}"
      version: "{{ python_version }}"
  when: virtualenvs is undefined

- name: VirtualEnv | Setup default virtualenv
  set_fact:
    virtualenv: "Global-{{ python_version }}"
  when: virtualenv is undefined

- name: VirtualEnv | Switching Python back to system
  become: yes
  become_user: "{{ fubarhouse_user }}"
  shell: "{{ fubarhouse_user_dir }}/{{ fubarhouse_python.main_dir }}/{{ fubarhouse_python.main_path }}/{{ fubarhouse_python.main_exec }} global system"
  when: '"{{ virtualenv }}" not in "{{ virtualenv_current_version.stdout_lines }}"'

- name: VirtualEnv | Install virtual environment
  become: yes
  become_user: "{{ fubarhouse_user }}"
  shell: "{{ fubarhouse_user_dir }}/{{ fubarhouse_python.main_dir }}/{{ fubarhouse_python.main_path }}/{{ fubarhouse_python.main_exec }} virtualenv {{ item.version }} {{ item.name }}"
  with_items: "{{ virtualenvs }}"
  when: '"{{ item.name }}" not in "{{ virtualenv_versions.stdout_lines }}"'

- name: VirtualEnv | Set virtual environment to default
  become: yes
  become_user: "{{ fubarhouse_user }}"
  shell: "{{ fubarhouse_user_dir }}/{{ fubarhouse_python.main_dir }}/{{ fubarhouse_python.main_path }}/{{ fubarhouse_python.main_exec }} global {{ virtualenv }}"
  with_items: "{{ virtualenvs }}"
  when: '"{{ item.name }}" not in "{{ virtualenv_current_version.stdout_lines }}"'

- name: VirtualEnv | Verify current version
  become: yes
  become_user: "{{ fubarhouse_user }}"
  shell: "{{ fubarhouse_user_dir }}/{{ fubarhouse_python.main_dir }}/{{ fubarhouse_python.main_path }}/{{ fubarhouse_python.main_exec }} virtualenvs | grep '*'"
  register: virtualenv_current_version_after_role
  failed_when: '"{{ virtualenv }}" not in "{{ virtualenv_current_version_after_role.stdout_lines }}"'
  when: '"{{ virtualenv }}" not in "{{ virtualenv_current_version.stdout_lines }}"'